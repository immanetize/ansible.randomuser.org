---
- name: install lvm packages
  dnf:
    name=lvm2
    state=present
- name: get block devices
  shell: echo /dev/xvd[a-z]*
  register: starting_block_devices

- name: create cbs volumes
  delegate_to: localhost
  rax_cbs:
    creds_file="{{rax_creds_file}}"
    volume_type="{{volume.type}}"
    region=IAD
    wait=yes
    size="{{volume.size}}"
    name="mailspool_lv_{{item}}"
  with_sequence: "count={{volume.mirrors|int | default(5)}}"
  register: cbs_volumes

- name: attach cbs volumes
  delegate_to: localhost
  rax_cbs_attachments:
    creds_file: "{{rax_creds_file}}"
    server: "{{inventory_hostname}}.{{ domain }}"
    region: "{{ region }}"
    volume: "{{item['volume']['id']}}"
    state: present
  with_items: "{{ cbs_volumes.results }}"
  register: cbs_attach

- name: get block devices
  shell: echo /dev/xvd[a-z]
  register: post_attach_block_devices

- debug: var=post_attach_block_devices
- name: partition block devices
  shell: "parted {{item}} mklabel gpt mkpart lvm 2048s 100% creates={{item}}1"
  
  with_items: "{{post_attach_block_devices.stdout.split()}}"

- name: get available partitions
  shell: echo /dev/xvd[a-z]1
  register: partition_list
- debug:
    msg="{% for item in  partition_list.stdout.split() %}{% if item not in ansible_mounts|map(attribute='device') %}{% print item %}{% endif %}{% if not loop.last and not loop.first %}{% print ',' %}{% endif %}{% endfor %}"



- name: create the PVs and vg in one go
  lvg:
    pvs="{% for item in  partition_list.stdout.split() %}{% if item not in ansible_mounts|map(attribute='device') %}{% print item %}{% endif %}{% if not loop.last and not loop.first %}{% print ',' %}{% endif %}{% endfor %}"
    vg="{{volume.name}}"

- name: create the lvs
  lvol:
    lv="{{item.name}}"
    size="{{item.size}}"
    vg="{{volume.name}}"
    opts="--monitor y 
      --type raid1"
  with_items: "{{volume.logical_volumes}}"

- name: create filesystems
  filesystem:
    dev="/dev/{{volume.name}}/{{item.name}}"
    fstype="{{item.filesystem|default("ext4")}}"
  with_items: "{{volume.logical_volumes}}"

- name: create the mount point
  mount:
    src="/dev/{{volume.name}}/{{item.name}}"
    fstype="{{item.filesystem|default("ext4")}}"
    name="{{item.path}}"
    state=mounted
  with_items: "{{volume.logical_volumes}}"






